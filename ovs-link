#!/bin/bash
# Modified from Nicira Inc by Fabien Mauhourat under GNU GPLv3

# Check for programs we'll need.
search_path () {
    save_IFS=$IFS
    IFS=:
    for dir in $PATH; do
        IFS=$save_IFS
        if test -x "$dir/$1"; then
            echo 0
            return 0
        fi
    done
    IFS=$save_IFS
    echo 1
    return 1
}

ovs_vsctl () {
    ovs-vsctl --timeout=60 "$@"
}

create_netns_link () {
    mkdir -p /var/run/netns
    if [ ! -e /var/run/netns/"$CONTAINER_ID" ]; then
        ln -s /proc/"$CONTAINER_ID"/ns/net /var/run/netns/"$CONTAINER_ID"
        trap 'delete_netns_link' 0
        for signal in 1 2 3 13 14 15; do
            trap 'delete_netns_link; trap - $signal; kill -$signal $$' $signal
        done
    fi
}

delete_netns_link () {
    rm -f /var/run/netns/"$CONTAINER_ID"
}

get_port_for_container_interface () {
    local CONTAINER="$1"
    local INTERFACE="$2"

    PORT=`ovs_vsctl --data=bare --no-heading --columns=name find interface \
             external_ids:container_id="$CONTAINER"  \
             external_ids:container_iface="$INTERFACE"`
    if [ -z "$PORT" ]; then
        echo >&2 "$UTIL: Failed to find any attached port" \
                 "for CONTAINER=$CONTAINER and INTERFACE=$INTERFACE"
    fi
    echo "$PORT"
}

get_runtime () {
    local CONTAINER="$1"
    local USER="$2"
    
    if DOCKER=`search_path docker` && SINGULARITY=`search_path singularity` && LXC=`search_path lxc-start`; then :; else
      echo >&2 "$UTIL Failed to get container RUNTIME : singularity or docker binary doesn't exists"
      exit 1
    fi
    
    if [ "$DOCKER" = "0" ]; then
      for ID in `docker ps -q`; do
        if [ "$ID" = "$CONTAINER" ]; then
          if RUNTIME=`docker inspect -f '{{.HostConfig.Runtime}}' "$CONTAINER" 2>/dev/null`; then :;
          fi
        fi
      done
    fi
    
    if [ "$SINGULARITY" = "0" ]; then
      SINGULARITY_LIST=`singularity instance list -u "$USER" "$CONTAINER" 2>/dev/null | wc -l`
      if [ $SINGULARITY_LIST = 2 ]; then
        RUNTIME="singularity"
      fi
    fi
    
    if [ "$LXC" = "0" ]; then
      if STATE=`sudo -i -u $USER lxc-info --state --name="$CONTAINER" 2>/dev/null | awk '{print $2}'`;then
        if [ "$STATE" = "RUNNING" ]; then
          RUNTIME="lxc"
        fi
      fi
    fi
    
    if [ "$RUNTIME" = "runc" -o "$RUNTIME" = "gvisor" -o "$RUNTIME" = "kata-runtime"\
     -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc" ]; then echo $RUNTIME; exit 0; else
     echo >&2 "$UTIL Failed to get container RUNTIME for CONTAINER=$CONTAINER"
     exit 1
   fi
}

get_bridge_type () {
  local $BRIDGE="$1"
  
  BRIDGE_NAME=`ip -d link show $BRIDGE | awk 'NR==3 && $0~/^[ ]*bridge/ {print $1}'`
  
  if [ -n "$BRIDGE_NAME" ]; then
    TYPE="bridge"
  elif ovs_vsctl br-exists "$BRIDGE" || \
      ovs_vsctl add-br "$BRIDGE"; then TYPE="ovs"; else
      echo >&2 "$UTIL: Failed to create bridge $BRIDGE"
      exit 1
  fi
  echo "$TYPE"
}

get_pid () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local USER="$3"
  
  if [ "$RUNTIME" = "runc" -o "$RUNTIME" = "kata-runtime" -o "$RUNTIME" = "runsc" ]; then
    if PID=`docker inspect -f '{{.State.Pid}}' "$CONTAINER"`; then :; else
        echo >&2 "$UTIL: Failed to get the PID of the container"
        exit 1
    fi
  elif [ "$RUNTIME" = "singularity" ]; then
    if PID=`singularity instance list -u "$USER" "$CONTAINER" | awk 'NR==2 {print $2}'`; then :; else
        echo >&2 "$UTIL: Failed to get the PID of the container"
        exit 1
    fi
  elif [ "$RUNTIME" = "lxc" ]; then
    if PID=`sudo -i -u $USER -- lxc-info --name=$CONTAINER | awk '$0~/PID/ {print $2}'`; then :; else
        echo >&2 "$UTIL: Failed to get the PID of the container"
        exit 1
    fi
  fi
  echo $PID
}

get_mac_address () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  
  if [ "$RUNTIME" = "kata-runtime" ]; then
    if MAC=`docker exec $CONTAINER  ip addr show $INTERFACE | awk '/link\/ether/ {print $2}'`; then :; else
        echo >&2 "$UTIL: Failed to get IP Address of $INTERFACE in the container"
        exit 1
    fi
  elif [ "$RUNTIME" = "runc" -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc" ]; then
    MAC=`ip netns exec "$CONTAINER" ip addr show $INTERFACE | awk '/link\/ether/ {print $2}'`
  fi
  
  echo $MAC  
}

get_ip_address () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  
  if [ "$RUNTIME" = "kata-runtime" ]; then
    if IP=`docker exec $CONTAINER ip -o -4 addr show $INTERFACE | \
    awk '{split($4,ip,"/");print ip[1]}'`; then :; else
        echo >&2 "$UTIL: Failed to get IP Address of $INTERFACE in the container"
        exit 1
    fi
  elif [ "$RUNTIME" = "runc" -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc" ]; then
    IP=`ip netns exec "$CONTAINER" ip -o -4 addr show $INTERFACE | awk '{split($4,ip,"/");print ip[1]}'`
  fi
  
  echo $IP  
}

delete_openflow_rules () {
  local PORT="$1"
  local BRIDGE="$2"
  local ARPGUARD="$3"
  local IPGUARD="$4"
  
  if [ "$ARPGUARD" = "0" -a "$IPGUARD" = "1" ]; then
    ovs-ofctl del-flows $BRIDGE "ip,in_port=${PORT}" 2>/dev/null
  else
    ovs-ofctl del-flows $BRIDGE "in_port=${PORT}"  2>/dev/null
    ovs-ofctl del-flows $BRIDGE "ip,in_port=${PORT}"  2>/dev/null
  fi

}

delete_ebtables_rules () {
  local PORT="$1"
  local ARPGUARD="$2"
  local IPGUARD="$3"
  
  if search_path ebtables > /dev/null; then :; else
    exit 1
  fi
  
  for CHAIN in "INPUT" "FORWARD"; do
    if [ "$ARPGUARD" = "1" -a "$IPGUARD" = "0" ]; then
      RULE_NUMBER_LOW=`ebtables -t filter -L $CHAIN --Ln | awk '/'$PORT'/ && $0!~/IPv4/ {print $1}' | tr -d '.' | head -n 1`
      RULE_NUMBER_HIGH=`ebtables -t filter -L $CHAIN --Ln | awk '/'$PORT'/ && $0!~/IPv4/ {print $1}' | tr -d '.' | tail -n 1`
    elif [ "$ARPGUARD" = "0" -a "$IPGUARD" = "1" ]; then
      RULE_NUMBER_LOW=`ebtables -t filter -L $CHAIN --Ln | awk '/'$PORT'/ && $0~/IPv4/ {print $1}' | tr -d '.' | head -n 1`
      RULE_NUMBER_HIGH=`ebtables -t filter -L $CHAIN --Ln | awk '/'$PORT'/ && $0~/IPv4/ {print $1}' | tr -d '.' | tail -n 1`
    else
      RULE_NUMBER_LOW=`ebtables -t filter -L $CHAIN --Ln | awk '/'$PORT'/ {print $1}' | tr -d '.' | head -n 1`
      RULE_NUMBER_HIGH=`ebtables -t filter -L $CHAIN --Ln | awk '/'$PORT'/ {print $1}' | tr -d '.' | tail -n 1`
    fi
    
    if [ -n "$RULE_NUMBER_LOW" -a -n "$RULE_NUMBER_HIGH" ]; then
      ebtables -t filter -D $CHAIN ${RULE_NUMBER_LOW}:${RULE_NUMBER_HIGH}
    fi
  done
  
}

check_ebtables_rules () {
  local PORT="$1"
  local ARPGUARD="$2"
  local IPGUARD="$3"
  
  for CHAIN in "INPUT" "FORWARD"; do
    if [ "$ARPGUARD" = "1" -a "$IPGUARD" = "0" ]; then
      RULE=`ebtables -t filter -L $CHAIN --Ln | awk '/'$PORT'/ && $0!~/IPv4/ {print $1}' | tr -d '.' | head -n 1`
      if [ "$RULE" != "" ];then 
        echo >&2 "$UTIL: ebtables rules already exists for INTERFACE=$PORT"
        exit 1
      fi
    elif [ "$ARPGUARD" = "0" -a "$IPGUARD" = "1" ]; then
      RULE=`ebtables -t filter -L $CHAIN --Ln | awk '/'$PORT'/ && $0~/IPv4/ {print $1}' | tr -d '.' | head -n 1`
      if [ "$RULE" != "" ];then 
        echo >&2 "$UTIL: ebtables rules already exists for INTERFACE=$PORT"
        exit 1
      fi
    fi
  done
  
}

set_ip_address () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  local ADDRESS="$4"
  
  if [ "$RUNTIME" = "kata-runtime" ]; then
    if docker exec $CONTAINER ip addr flush dev "$INTERFACE" > /dev/null 2>&1; then :; else
        echo >&2 "$UTIL: Failed to flush ADDRESS of $INTERFACE in the container"
        exit 1
    fi
    docker exec $CONTAINER ip addr add "$ADDRESS" dev "$INTERFACE"
  elif [ "$RUNTIME" = "runc" -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc" ]; then
    ip netns exec "$CONTAINER" ip addr flush dev "$INTERFACE"
    ip netns exec "$CONTAINER" ip addr add "$ADDRESS" dev "$INTERFACE"
  fi
  
}

set_gateway () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  local GATEWAY="$4"
  
  if [ "$RUNTIME" = "kata-runtime" ]; then
    docker exec $CONTAINER ip route delete default > /dev/null 2>&1
    if docker exec $CONTAINER ip route add default via "$GATEWAY" > /dev/null 2>&1; then :; else
        echo >&2 "$UTIL: Failed to set the GATEWAY in the container"
        exit 1
    fi
  elif [ "$RUNTIME" = "runc" -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc" ]; then
    ip netns exec "$CONTAINER" ip route delete default 2>/dev/null
    ip netns exec "$CONTAINER" ip route add default via "$GATEWAY"
  fi
  
}

set_mtu () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  local MTU="$4"
  
  if [ "$RUNTIME" = "kata-runtime" ]; then
    if docker exec $CONTAINER ip link set dev "$INTERFACE" mtu "$MTU" > /dev/null 2>&1; then :; else
        echo >&2 "$UTIL: Failed to set the MTU of $INTERFACE in the container"
        exit 1
    fi
  elif [ "$RUNTIME" = "runc"  -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc"  ]; then
    ip netns exec "$CONTAINER" ip link set dev "$INTERFACE" mtu "$MTU"
  fi
  
}

set_mac_address () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  local MACADDRESS="$4"
  
  if [ "$RUNTIME" = "kata-runtime" ]; then
    if docker exec $CONTAINER ip link set dev "$INTERFACE" address "$MACADDRESS" > /dev/null 2>&1; then :; else
        echo >&2 "$UTIL: Failed to set the MACADDRESS of $INTERFACE in the container"
        exit 1
    fi
  elif [ "$RUNTIME" = "runc" -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc" ]; then
    ip netns exec "$CONTAINER" ip link set dev "$INTERFACE" address "$MACADDRESS"
  fi
  
}

set_dns () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  local USER="$4"
  local DNS="$5"
  
  if [ "$RUNTIME" = "kata-runtime" -o "$RUNTIME" = "runc" ]; then
      if docker exec $CONTAINER bash -c "echo nameserver $DNS > /etc/resolv.conf";then :; else
          echo >&2 "$UTIL: Failed to set the DNS in the container"
          exit 1
      fi
  elif [ "$RUNTIME" = "singularity" ]; then
      if singularity exec instance://${CONTAINER} bash -c "echo nameserver $DNS > /etc/resolv.conf";\
      then :; else
          echo >&2 "$UTIL: Failed to set the DNS in the container"
          exit 1
      fi
  elif [ "$RUNTIME" = "lxc" ]; then
      if sudo -i -u $USER -- lxc-attach --name=$CONTAINER -- bash -c "echo nameserver $DNS > /etc/resolv.conf";\
      then :; else
          echo >&2 "$UTIL: Failed to set the DNS in the container"
          exit 1
      fi
  fi
  
}

clean_dhclient () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  local USER="$4"
  
  if [ "$RUNTIME" = "kata-runtime" -o "$RUNTIME" = "runc" ]; then
    DHCLIENT=`docker exec $CONTAINER pgrep -f "dhclient $INTERFACE"`
    docker exec $CONTAINER bash -c "kill $DHCLIENT 2>/dev/null"
  fi
  
  if [ "$RUNTIME" = "singularity" ]; then
    DHCLIENT=`singularity exec instance://${CONTAINER} pgrep -f "dhclient $INTERFACE"`
    singularity exec instance://${CONTAINER} kill $DHCLIENT 2>/dev/null
  fi
  
  if [ "$RUNTIME" = "lxc" ]; then
    DHCLIENT=`sudo -i -u $USER -- lxc-attach --name=$CONTAINER -- pgrep -f "dhclient $INTERFACE"`
    sudo -i -u $USER -- lxc-attach --name=$CONTAINER -- kill $DHCLIENT 2>/dev/null
  fi
  
}

set_dhcp () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  local USER="$4"
  
  clean_dhclient "$RUNTIME" "$CONTAINER" "$INTERFACE" "$USER"
  
  if [ "$RUNTIME" = "kata-runtime" -o "$RUNTIME" = "runc" ]; then
    
    if docker exec $CONTAINER ip addr flush dev "$INTERFACE" > /dev/null 2>&1; then :; else
        echo >&2 "$UTIL: Failed to flush ADDRESS of $INTERFACE in the container"
        exit 1
    fi
    FILE=`docker exec $CONTAINER bash -c "dhclient "$INTERFACE"" 2>&1 | \
    awk '$0!~/command not found/ {print $4}' | tail -1 | tr -d ''"'"''`
    if [ "$FILE" = "" ]; then
        echo >&2 "$UTIL: Failed to get ADDRESS from DHCP of $INTERFACE in the container"
        exit 1
    fi
    if docker exec $CONTAINER ls $FILE > /dev/null 2>&1; then :; else
        echo >&2 "$UTIL: Failed to set DNS of $INTERFACE in the container"
        exit 1
    fi
    docker exec $CONTAINER bash -c "cat $FILE > /etc/resolv.conf"
  fi
  
  if [ "$RUNTIME" = "singularity" ]; then
    
    FILE=`singularity exec instance://${CONTAINER} bash -c "dhclient "$INTERFACE"" 2>&1 | awk \
    '$0!~/command not found/ {print $4}' | tail -1 | tr -d ''"'"''`
    if [ "$FILE" = "" ]; then
        echo >&2 "$UTIL: Failed to get ADDRESS from DHCP of $INTERFACE in the container"
        exit 1
    fi
    if singularity exec instance://${CONTAINER} ls $FILE > /dev/null 2>&1; then :; else
        echo >&2 "$UTIL: Failed to set DNS of $INTERFACE in the container"
        exit 1
    fi
    singularity exec instance://${CONTAINER} bash -c "cat $FILE > /etc/resolv.conf"
  fi
  
  if [ "$RUNTIME" = "lxc" ]; then

    if sudo -i -u $USER -- lxc-attach --name=$CONTAINER dhclient $INTERFACE 2>/dev/null;\
    then :; else
        echo >&2 "$UTIL: Failed to set the DHCP in the container"
        exit 1
    fi
  fi
  
}

set_bandwith_limit_interface () {
  local INTERFACE="$1"
  local LIMITIN="$2"
  
  if ovs_vsctl set interface "$INTERFACE" ingress_policing_rate=$LIMITIN;then :;else
      echo >&2 "$UTIL: Failed to set ingress limit to INTERFACE=$INTERFACE"
      exit 1
  fi
  if ovs_vsctl set interface "$INTERFACE" ingress_policing_burst=$LIMITIN;then :;else
      echo >&2 "$UTIL: Failed to set ingress limit to INTERFACE=$INTERFACE"
      exit 1
  fi
    
}

set_vlan () {
  local INTERFACE="$1"
  local VLAN="$2"
  
  if [ "$VLAN" = "0" ]; then
    if ovs_vsctl remove port "$PORT" tag "$VLAN";then :;else
        echo >&2 "$UTIL: Failed to set VLAN $VLAN to INTERFACE=$INTERFACE"
        exit 1
    fi
  else
    if ovs_vsctl set port "$PORT" tag="$VLAN";then :;else
        echo >&2 "$UTIL: Failed to set VLAN $VLAN to INTERFACE=$INTERFACE"
        exit 1
    fi
  fi

}

set_arp_guard () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  local HOST_INTERFACE="$4"
  local BRIDGE_TYPE="$5"
  local BRIDGE="$6"
  
  MAC=`get_mac_address $RUNTIME $CONTAINER $INTERFACE`
  IP=`get_ip_address $RUNTIME $CONTAINER $INTERFACE`
  
  if [ "$BRIDGE_TYPE" = "ovs" ]; then
    ovs-ofctl add-flow $BRIDGE "table=0,in_port=$HOST_INTERFACE,dl_src=$MAC,priority=5,action=resubmit(,1)"
    ovs-ofctl add-flow $BRIDGE "table=0,in_port=$HOST_INTERFACE,priority=4,action=drop"
    ovs-ofctl add-flow $BRIDGE "table=1,in_port=$HOST_INTERFACE,arp,arp_sha=$MAC,arp_spa=$IP,priority=5,action=normal"
    ovs-ofctl add-flow $BRIDGE "table=1,in_port=$HOST_INTERFACE,arp,priority=4,action=drop"
    ovs-ofctl add-flow $BRIDGE "table=1,in_port=*,priority=0,action=normal"
  else
    if check_ebtables_rules "$HOST_INTERFACE" "1" "0";then :; else
      echo ok
      exit 1
    fi
    
    for CHAIN in "INPUT" "FORWARD"; do
      if ebtables -t filter -A $CHAIN -s ! $MAC -i $HOST_INTERFACE -j DROP 2>/dev/null;then :;else
        echo >&2 "$UTIL: Failed to set ARPGUARD to INTERFACE=$HOST_INTERFACE"
        exit 1
      fi
      ebtables -t filter -A $CHAIN -p ARP -i $HOST_INTERFACE --arp-mac-src ! $MAC -j DROP 2>/dev/null
      ebtables -t filter -A $CHAIN -p ARP -i $HOST_INTERFACE --arp-ip-src ! $IP -j DROP 2>/dev/null
    done
  fi
}

set_ip_guard () {
  local RUNTIME="$1"
  local CONTAINER="$2"
  local INTERFACE="$3"
  local HOST_INTERFACE="$4"
  local BRIDGE_TYPE="$5"
  local BRIDGE="$6"
  
  IP=`get_ip_address $RUNTIME $CONTAINER $INTERFACE`
  
  if [ "$BRIDGE_TYPE" = "ovs" ]; then
    if set_arp_guard "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$HOST_INTERFACE" "$BRIDGE_TYPE" "$BRIDGE"; then :; else
        exit 1
    fi
    ovs-ofctl add-flow $BRIDGE "table=1,in_port=$HOST_INTERFACE,ip,nw_src=$IP,priority=3,action=normal"
    ovs-ofctl add-flow $BRIDGE "table=1,in_port=$HOST_INTERFACE,ip,priority=2,action=drop"
  else
    if check_ebtables_rules "$HOST_INTERFACE" "0" "1";then :; else
      exit 1
    fi
    
    MAC=`get_mac_address $RUNTIME $CONTAINER $INTERFACE`
    
    if ebtables -t filter -A INPUT -p IPv4 -s $MAC -i $HOST_INTERFACE --ip-src 0.0.0.0 \
    --ip-dst 255.255.255.255 --ip-proto udp --ip-dport 67 -j ACCEPT 2>/dev/null;then :;else
      echo >&2 "$UTIL: Failed to set IPPGUARD to INTERFACE=$HOST_INTERFACE"
      exit 1
    fi
    ebtables -t filter -A INPUT -p IPv4 -i $HOST_INTERFACE --ip-src ! $IP -j DROP 2>/dev/null
    ebtables -t filter -A FORWARD -p IPv4 -i $HOST_INTERFACE --ip-src ! $IP -j DROP 2>/dev/null
  fi
}

add_port () {
    BRIDGE="$1"
    INTERFACE="$2"
    CONTAINER_NAME="$3"
    USER="root"

    if [ -z "$BRIDGE" ] || [ -z "$INTERFACE" ] || [ -z "$CONTAINER_NAME" ]; then
        echo >&2 "$UTIL add-port: not enough arguments (use --help for help)"
        exit 1
    fi

    shift 3
    while [ $# -ne 0 ]; do
        case $1 in
            --user=*)
                USER=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --ipaddress=*)
                ADDRESS=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --macaddress=*)
                MACADDRESS=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --gateway=*)
                GATEWAY=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --mtu=*)
                MTU=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --dns=*)
                DNS=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --limitin=*)
                LIMITIN=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --arpguard)
                ARPGUARD=1
                shift
                ;;
            --ipguard)
                IPGUARD=1
                shift
                ;;
            --dhcp)
                DHCP=1
                shift
                ;;
            *)
                echo >&2 "$UTIL add-port: unknown option \"$1\""
                exit 1
                ;;
        esac
    done

    if RUNTIME=`get_runtime "$CONTAINER_NAME" "$USER"`; then :; else
      exit 1
    fi

    # Check if a port is already attached for the given container and interface
    PORT=`get_port_for_container_interface "$CONTAINER_NAME" "$INTERFACE" \
            2>/dev/null`
    if [ -n "$PORT" ]; then
        echo >&2 "$UTIL: Port already attached" \
                 "for CONTAINER=$CONTAINER_NAME and INTERFACE=$INTERFACE"
        exit 1
    fi

    if BRIDGE_TYPE=`get_bridge_type "$BRIDGE"`; then :; else
        exit 1
    fi
    
    if [ "$RUNTIME" = "runc" -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc" ]; then
      
      if PID=`get_pid "$RUNTIME" "$CONTAINER_NAME" "$USER"`;then :; else
        exit 1
      fi
      
      CONTAINER_ID=$PID
      
      create_netns_link
      
      # chack if interface exists inside the container
      if ip netns exec "$CONTAINER_ID" ip link | grep "$INTERFACE" >/dev/null;then
        echo >&2 "$UTIL: INTERFACE=$INTERFACE exists in CONTAINER=$CONTAINER_NAME"
        exit 1
      fi

      # Create a veth pair.
      ID=`uuidgen | sed 's/-//g'`
      PORTNAME="${ID:0:13}"
      HOST_INTERFACE="${PORTNAME}_l"
      ip link add "${PORTNAME}_l" type veth peer name "${PORTNAME}_c"

      # Add one end of veth to OVS bridge.
      if ovs_vsctl --may-exist add-port "$BRIDGE" "${PORTNAME}_l" \
         -- set interface "${PORTNAME}_l" \
         external_ids:container_id="$CONTAINER_NAME" \
         external_ids:container_iface="$INTERFACE"; then :; else
          echo >&2 "$UTIL: Failed to add "${PORTNAME}_l" port to bridge $BRIDGE"
          ip link delete "${PORTNAME}_l"
          exit 1
      fi

      ip link set "${PORTNAME}_l" up

      # Move "${PORTNAME}_c" inside the container and changes its name.
      ip link set "${PORTNAME}_c" netns "$CONTAINER_ID"
      ip netns exec "$CONTAINER_ID" ip link set dev "${PORTNAME}_c" name "$INTERFACE"
      ip netns exec "$CONTAINER_ID" ip link set "$INTERFACE" up
    
    else
      
      CONTAINER_ID=$CONTAINER_NAME
      
      # Get the interface that correspond to the container
      HOST_INTERFACE=`ip -o link | awk '/if'$(nsenter \
      --net=$(docker inspect -f '{{.NetworkSettings.SandboxKey}}' $CONTAINER_ID) \
      ip link | awk '/'$INTERFACE'/ {print $1}' | tr -d ':')'/ {split($2,id,"@");print id[1]}'`

      if [ $? -ne 0 ]; then
          echo >&2 "$UTIL: Failed to get the interface on the host" \
                   "for CONTAINER=$CONTAINER_ID and INTERFACE=$INTERFACE"
          exit 1
      fi
      
      # Nomaster the interface from the default BRIDGE
      ip link set down dev "$HOST_INTERFACE"
      if [ $? -ne 0 ]; then
          echo >&2 "$UTIL: Failed to modify the status of the interface $HOST_INTERFACE"
          exit 1
      fi
      
      ip link set nomaster dev "$HOST_INTERFACE"
      
      # Add the interface to the OVS BRIDGE
      if ovs_vsctl --may-exist add-port "$BRIDGE" "$HOST_INTERFACE" \
         -- set interface "$HOST_INTERFACE" \
         external_ids:container_id="$CONTAINER_NAME" \
         external_ids:container_iface="$INTERFACE"; then :; else
          echo >&2 "$UTIL: Failed to add "$HOST_INTERFACE" port to bridge $BRIDGE"
          exit 1
      fi
      
      ip link set up dev "$HOST_INTERFACE"
      
    fi
    
    if [ -n "$ARPGUARD" -o -n "$IPGUARD" ]; then
      if [ "$BRIDGE_TYPE" = "bridge" ]; then
        if search_path ebtables > /dev/null; then :; else
          echo >&2 "$UTIL: ebtables not found in \$PATH, please install and try again"
          exit 1
        fi
      fi
    fi
    
    if [ -n "$MTU" ]; then
      if set_mtu "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$MTU"; then :; else
          exit 1
      fi
    fi

    if [ -n "$ADDRESS" ]; then
      if set_ip_address "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$ADDRESS"; then :; else
          exit 1
      fi
    fi

    if [ -n "$MACADDRESS" ]; then
      if set_mac_address "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$MACADDRESS"; then :; else
          exit 1
      fi
    fi

    if [ -n "$GATEWAY" ]; then
      if set_gateway "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$GATEWAY"; then :; else
          exit 1
      fi
    fi
    
    if [ -n "$DNS" ]; then
      if set_dns "$RUNTIME" "$CONTAINER_NAME" "$INTERFACE" "$USER" "$DNS"; then :; else
          exit 1
      fi
    fi
    
    if [ -z "$ADDRESS" -a "$DHCP" ]; then
      if set_dhcp "$RUNTIME" "$CONTAINER_NAME" "$INTERFACE" "$USER"; then :; else
          exit 1
      fi
    fi
    
    if [ -n "$LIMITIN" ]; then
      if [ "$BRIDGE_TYPE" = "ovs" ]; then
        if set_bandwith_limit_interface "$HOST_INTERFACE" "$LIMITIN"; then :; else
            exit 1
        fi
      else
        echo >&2 "$UTIL limitin: feature only available for ovs type bridge"
      fi
    fi

    if [ -n "$ARPGUARD" ]; then
      if [ "$BRIDGE_TYPE" = "bridge" ] || [ "$BRIDGE_TYPE" = "ovs" -a -z "$IPGUARD" ]; then
        if set_arp_guard "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$HOST_INTERFACE" "$BRIDGE_TYPE" "$BRIDGE"; then :; else
            exit 1
        fi
      fi
    fi

    if [ -n "$IPGUARD" ]; then
      if set_ip_guard "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$HOST_INTERFACE" "$BRIDGE_TYPE" "$BRIDGE"; then :; else
          exit 1
      fi
    fi

}

set_port () {
    BRIDGE="$1"
    INTERFACE="$2"
    CONTAINER_NAME="$3"
    USER="root"

    if [ -z "$INTERFACE" ] || [ -z "$CONTAINER_NAME" ]; then
        echo >&2 "$UTIL add-port: not enough arguments (use --help for help)"
        exit 1
    fi

    shift 3
    while [ $# -ne 0 ]; do
        case $1 in
            --user=*)
                USER=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --ipaddress=*)
                ADDRESS=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --macaddress=*)
                MACADDRESS=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --gateway=*)
                GATEWAY=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --mtu=*)
                MTU=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --dns=*)
                DNS=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --limitin=*)
                LIMITIN=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --arpguard=*)
                ARPGUARD=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --ipguard=*)
                IPGUARD=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            --dhcp)
                DHCP=1
                shift
                ;;
            --vlan=*)
                VLAN=`expr X"$1" : 'X[^=]*=\(.*\)'`
                shift
                ;;
            *)
                echo >&2 "$UTIL add-port: unknown option \"$1\""
                exit 1
                ;;
        esac
    done

    if RUNTIME=`get_runtime "$CONTAINER_NAME" "$USER"`; then :; else
      exit 1
    fi

    # Check if a port is already attached for the given container and interface
    PORT=`get_port_for_container_interface "$CONTAINER_NAME" "$INTERFACE" \
            2>/dev/null`
    if [ -z "$PORT" ]; then
        echo >&2 "$UTIL: Port doesn't attach to ovs for CONTAINER=$CONTAINER_NAME and INTERFACE=$INTERFACE"
        exit 1
    fi
    
    if BRIDGE_TYPE=`get_bridge_type "$BRIDGE"`; then :; else
        exit 1
    fi
    
    HOST_INTERFACE="$PORT"
    PORT_OPENFLOW_ID=`ovs-vsctl get interface $PORT ofport`
    
    if [ "$RUNTIME" = "runc" -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc" ]; then
      
      if PID=`get_pid "$RUNTIME" "$CONTAINER_NAME" "$USER"`;then :; else
        exit 1
      fi
      
      CONTAINER_ID=$PID
      
      if [ -n "$ADDRESS" -o -n "$MACADDRESS" -o -n "$MTU" -o -n "$GATEWAY" -o -n "$DHCP" -o -n "$ARPGUARD" -o -n "$IPGUARD" ];then
        
        create_netns_link
        
        # chack if interface exists inside the container
        if ip netns exec "$CONTAINER_ID" ip link | grep "$INTERFACE" >/dev/null;then :; else
          echo >&2 "$UTIL: INTERFACE=$INTERFACE exists in CONTAINER=$CONTAINER"
          exit 1
        fi
      fi
    else
      CONTAINER_ID=$CONTAINER_NAME
    fi
    
    if [ -n "$ARPGUARD" -o -n "$IPGUARD" ]; then
      if [ "$BRIDGE_TYPE" = "bridge" ]; then
        if search_path ebtables > /dev/null; then :; else
          echo >&2 "$UTIL: ebtables not found in \$PATH, please install and try again"
          exit 1
        fi
      fi
    fi
    
    if [ -n "$MTU" ]; then
      if set_mtu "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$MTU"; then :; else
          exit 1
      fi
    fi

    if [ -n "$ADDRESS" ]; then
      clean_dhclient "$RUNTIME" "$CONTAINER_NAME" "$INTERFACE" "$USER"
      if set_ip_address "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$ADDRESS"; then :; else
          exit 1
      fi
    fi

    if [ -n "$MACADDRESS" ]; then
      if set_mac_address "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$MACADDRESS"; then :; else
          exit 1
      fi
    fi

    if [ -n "$GATEWAY" ]; then
      if set_gateway "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$GATEWAY"; then :; else
          exit 1
      fi
    fi
    
    if [ -n "$DNS" ]; then
      if set_dns "$RUNTIME" "$CONTAINER_NAME" "$INTERFACE" "$USER" "$DNS"; then :; else
          exit 1
      fi
    fi
    
    if [ -z "$ADDRESS" -a "$DHCP" ]; then
      if set_dhcp "$RUNTIME" "$CONTAINER_NAME" "$INTERFACE" "$USER"; then :; else
          exit 1
      fi
    fi
    
    if [ -n "$LIMITIN" ]; then
      if [ "$BRIDGE_TYPE" = "ovs" ]; then
        if set_bandwith_limit_interface "$HOST_INTERFACE" "$LIMITIN"; then :; else
            exit 1
        fi
      else
        echo >&2 "$UTIL LIMITIN: feature only available for ovs type bridge"
      fi
    fi

    if [ -n "$ARPGUARD" ]; then
      if [ "$ARPGUARD" = "yes" ]; then
        if [ "$BRIDGE_TYPE" = "bridge" ] || [ "$BRIDGE_TYPE" = "ovs" -a -z "$IPGUARD" ]; then
          if set_arp_guard "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$HOST_INTERFACE" "$BRIDGE_TYPE" "$BRIDGE"; then :; else
              exit 1
          fi
        fi
      else
        if [ "$BRIDGE_TYPE" = "ovs" ]; then
          delete_openflow_rules "$PORT_OPENFLOW_ID" "$BRIDGE" "1" "1"
          IPGUARD=""
        else
          delete_ebtables_rules "$PORT" "1" "0"
        fi
      fi
    fi

    if [ -n "$IPGUARD" ]; then
      if [ "$IPGUARD" = "yes" ]; then
        if set_ip_guard "$RUNTIME" "$CONTAINER_ID" "$INTERFACE" "$HOST_INTERFACE" "$BRIDGE_TYPE" "$BRIDGE"; then :; else
            exit 1
        fi
      else
        if [ "$BRIDGE_TYPE" = "ovs" ]; then
          delete_openflow_rules "$PORT_OPENFLOW_ID" "$BRIDGE" "0" "1"
        else
          delete_ebtables_rules "$PORT" "0" "1"
        fi
      fi
    fi
    
    if [ -n "$VLAN" ]; then
      if [ "$BRIDGE_TYPE" = "ovs" ]; then
        if set_vlan "$HOST_INTERFACE" "$VLAN"; then :; else
            exit 1
        fi
      else
        echo >&2 "$UTIL VLAN: feature only available for ovs type bridge"
      fi
    fi
    
}

del_port () {
    BRIDGE="$1"
    INTERFACE="$2"
    CONTAINER="$3"
    if [ -n "$4" ]; then
      USER=`expr X"$4" : 'X[^=]*=\(.*\)'`
    else
      USER="root"
    fi

    if [ "$#" -lt 3 ]; then
        usage
        exit 1
    fi

    if RUNTIME=`get_runtime "$CONTAINER" "$USER"`; then :; else
      exit 1
    fi
    
    PORT=`get_port_for_container_interface "$CONTAINER" "$INTERFACE"`
    if [ -z "$PORT" ]; then
        exit 1
    fi
    
    if BRIDGE_TYPE=`get_bridge_type "$BRIDGE"`; then :; else
        exit 1
    fi

    PORT_OPENFLOW_ID=`ovs-vsctl get interface $PORT ofport`
    
    ovs_vsctl --if-exists del-port "$PORT"
    
    clean_dhclient "$RUNTIME" "$CONTAINER" "$INTERFACE" "$USER"
    
    if [ "$RUNTIME" = "runc" -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc" ]; then
      ip link delete "$PORT"
    else
      ip link set nomaster dev "$PORT"
    fi
    
    if [ "$BRIDGE_TYPE" = "ovs" ]; then
      delete_openflow_rules "$PORT_OPENFLOW_ID" "$BRIDGE" "1" "1"
    else
      delete_ebtables_rules "$PORT" "1" "1"
    fi
}

del_ports () {
    BRIDGE="$1"
    CONTAINER="$2"
    if [ -n "$3" ]; then
      USER=`expr X"$3" : 'X[^=]*=\(.*\)'`
    else
      USER="root"
    fi
    
    if [ "$#" -lt 2 ]; then
        usage
        exit 1
    fi

    if RUNTIME=`get_runtime "$CONTAINER" "$USER"`; then :; else
      exit 1
    fi
    
    PORTS=`ovs_vsctl --data=bare --no-heading --columns=name find interface \
             external_ids:container_id="$CONTAINER"`
    if [ -z "$PORTS" ]; then
        exit 0
    fi
    
    if BRIDGE_TYPE=`get_bridge_type "$BRIDGE"`; then :; else
        exit 1
    fi
    
    PORT_OPENFLOW_ID=`ovs-vsctl get interface $PORT ofport`
    
    for PORT in $PORTS; do
        ovs_vsctl --if-exists del-port "$PORT"
        
        clean_dhclient "$RUNTIME" "$CONTAINER" "$INTERFACE" "$USER"
        
        if [ "$RUNTIME" = "runc" -o "$RUNTIME" = "singularity" -o "$RUNTIME" = "lxc" ]; then
          ip link delete "$PORT"
        else
          ip link set nomaster dev "$PORT"
        fi
        
        if [ "$BRIDGE_TYPE" = "ovs" ]; then
          delete_openflow_rules "$PORT" "$BRIDGE" "1" "1"
        else
          delete_ebtables_rules "$PORT" "1" "1"
        fi
    done
}

flush () {
  BRIDGE="$1"
  
  if [ "$#" -lt 1 ]; then
      usage
      exit 1
  fi
  
  if ovs_vsctl list bridge $BRIDGE > /dev/null 2>&1; then :; else
    echo >&2 "$UTIL: Failed to get ports from $BRIDGE"
    exit 1
  fi
  
  if BRIDGE_TYPE=`get_bridge_type "$BRIDGE"`; then :; else
      exit 1
  fi
  
  for PORT in `ovs_vsctl --columns=ports --format=table --data=bare --no-headings list bridge $BRIDGE`
  do
    for NAME in `ovs_vsctl --columns=_uuid,name --format=csv --data=bare --no-headings list port`
    do
      
      PORT_UUID=`echo $NAME | cut -d ',' -f 1`
      PORT_NAME=`echo $NAME | cut -d ',' -f 2`
      
      if [ "$PORT" == "$PORT_UUID" ]; then
        
        if ovs_vsctl --columns=error --format=csv --data=bare --no-headings list interface $PORT_NAME | \
        grep "No such device" > /dev/null; then
          PORT_OPENFLOW_ID=`ovs-vsctl get interface $PORT_NAME ofport`
          
          ovs_vsctl del-port $BRIDGE $PORT_NAME
          
          if [ "$BRIDGE_TYPE" = "ovs" ]; then
            delete_openflow_rules "$PORT_OPENFLOW_ID" "$BRIDGE" "1" "1"
          else
            delete_ebtables_rules "$PORT_NAME" "1" "1"
          fi
        fi
      fi
    done  
  done
  
}

usage() {
    cat << EOF
${UTIL}: Performs integration of Open vSwitch with Docker/Kata-container/Gvisor/Singularity.
usage: ${UTIL} COMMAND

Commands:
  add-port BRIDGE INTERFACE CONTAINER [--user=USER] [--ipaddress="ADDRESS"]
                    [--gateway=GATEWAY] [--dns=DNS] [--macaddress="MACADDRESS"]
                    [--mtu=MTU] [--dhcp] [--limitin=VALUE in Kb] [--arpguard]
                    [--ipguard]
                    Adds INTERFACE inside CONTAINER and connects it as a port
                    in Open vSwitch BRIDGE. Optionally, sets ADDRESS on
                    INTERFACE. ADDRESS can include a '/' to represent network
                    prefix length. Optionally, sets a GATEWAY, MACADDRESS, MTU,
                    DHCP, IPGUARD, ARPGUARD and an ingress limit to interface.
                    For DHCP, it requires the capability CAP_NET_ADMIN
                    end the dhclient binary into the container.
                    For singularity and lxc, it requires the user who launch 
                    the container. e.g.:
                    ${UTIL} add-port br-int eth1 c474a0e2830e
                    --ipaddress=192.168.1.2/24 --gateway=192.168.1.1
                    --macaddress="a2:c3:0d:49:7f:f8" --mtu=1450
  set-port INTERFACE CONTAINER [--user=USER] [--ipaddress="ADDRESS"]
                    [--gateway=GATEWAY] [--dns=DNS] [--macaddress="MACADDRESS"]
                    [--mtu=MTU] [--dhcp] [--limitin=VALUE in Kb] [--arpguard=yes/no]
                    [--ipguard=yes/no] [--vlan=VLAN/no]
  del-port BRIDGE INTERFACE CONTAINER [USER]
                    Deletes INTERFACE inside CONTAINER and removes its
                    connection to Open vSwitch BRIDGE. e.g.:
                    ${UTIL} del-port br-int eth1 c474a0e2830e
  del-ports BRIDGE CONTAINER [USER]
                    Removes all Open vSwitch interfaces from CONTAINER. e.g.:
                    ${UTIL} del-ports br-int c474a0e2830e
  flush-ports BRIDGE
                    Deletes ports where the interface on the host is deleted.
                    ${UTIL} flush-ports br-int
Options:
  -h, --help        display this help message.
EOF
}

UTIL=$(basename $0)
if search_path ovs-vsctl > /dev/null; then :; else
  echo >&2 "$UTIL: ovs-vsctl not found in \$PATH, please install and try again"
  exit 1
fi

if search_path uuidgen > /dev/null; then :; else
  echo >&2 "$UTIL: uuidgen not found in \$PATH, please install and try again"
  exit 1
fi

if (ip netns) > /dev/null 2>&1; then :; else
    echo >&2 "$UTIL: ip utility not found (or it does not support netns),"\
             "cannot proceed"
    exit 1
fi

if [ $# -eq 0 ]; then
    usage
    exit 0
fi

case $1 in
    "add-port")
        shift
        add_port "$@"
        exit 0
        ;;
    "set-port")
        shift
        set_port "$@"
        exit 0
        ;;
    "del-port")
        shift
        del_port "$@"
        exit 0
        ;;
    "del-ports")
        shift
        del_ports "$@"
        exit 0
        ;;
    "flush-ports")
        shift
        flush "$@"
        exit 0
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    *)
        echo >&2 "$UTIL: unknown command \"$1\" (use --help for help)"
        exit 1
        ;;
esac
